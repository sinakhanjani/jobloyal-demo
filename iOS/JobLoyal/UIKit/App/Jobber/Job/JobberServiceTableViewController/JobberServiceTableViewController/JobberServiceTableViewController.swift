//
//  JobberServiceTableViewController.swift
//  JobLoyal
//
//  Created by Sina khanjani on 3/4/1400 AP.
//

import UIKit
import RestfulAPI

protocol JobberServiceTableViewControllerDelegate: AnyObject {
    func newServiceAddedTo(_ jobID: String)
}

class JobberServiceTableViewController: JobberTableViewController {
    
    @IBOutlet weak var addButton: UIButton!
    @IBOutlet weak var unitLabel: UILabel!
    @IBOutlet weak var unitTypeLabel: UILabel!
    @IBOutlet weak var priceTextField: InsetTextField!
    @IBOutlet weak var payAttentionLabel: UILabel!
    
    private var unitType: UnitTypeModel = .none {
        willSet {
            unitTypeLabel.text = newValue.value
            unitModelCellUpdateUI(newValue: newValue)
        }
    }
    private var unitModel: UnitModel? { // if id == nil created by user
        willSet {
            unitLabel.text = newValue?.title?.firstUppercased
        }
    }
    
    weak open var delegate: JobberServiceTableViewControllerDelegate?
    public var jobID: String?
    public var serviceListModel: ServiceListModel? // if id == nil (created by user)
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        unitModelCellUpdateUI(newValue: unitType)
    }
        
    override func viewDidLoad() {
        super.viewDidLoad()
        configUI()
    }
    
    private func configUI() {
        payAttentionLabel.highlight(searchedText: "Pay Attention".localized(), color: .heavyBlue)
        unitTypeLabel.text = unitType.value.firstUppercased
        
        if let vc = navigationController?.viewControllers.first as? JobberJobTableViewController {
            delegate = vc
        }
        
        updateUI()
    }
    
    private func updateUI() {
        guard let serviceListModel = serviceListModel else { return }
        guard let unit = serviceListModel.unit else { return }
 
        self.unitType = (unit.id == nil) ? .none : .numeric
        self.unitModel = unit
        self.unitLabel.text = unit.title?.firstUppercased
        
        unitModelCellUpdateUI(newValue: unitType)
    }
    
    private func unitModelCellUpdateUI(newValue: UnitTypeModel) {
        if let cell = tableView.cellForRow(at: IndexPath(item: 0, section: 1)) {
            if newValue == .hour || newValue == .none {
                cell.backgroundColor = .systemFill
                cell.isUserInteractionEnabled = false
                cell.selectionStyle = .none
                unitLabel.text = "-"
            } else {
                cell.backgroundColor = .secondarySystemGroupedBackground
                cell.isUserInteractionEnabled = true
                cell.selectionStyle = .default
                unitLabel.text = unitModel?.title ?? "None".localized()
            }
        }
    }
    
    private func addJobToJobberRequest(jobID: String, completion: @escaping (_ item: RCAddJobberJobModel?) -> Void) {
        // necessary 1
        // 1. add jobb to jobber then add service to jobber
        struct SendAddJobberJobModel: Codable { let job_id: String }
        let network = RestfulAPI<SendAddJobberJobModel,Generic<RCAddJobberJobModel>>.init(path: "/jobber/job/add")
            .with(auth: .jobber)
            .with(method: .POST)
            .with(body: SendAddJobberJobModel(job_id: jobID))
        
        addButton.setTitle("Adding".localized(), for: .normal)
        handleRequestByUI(network, animated: false, disable: [addButton]) { (response) in
            completion(response.data)
        }
        
        view.endEditing(true)
    }
    
    /// use this function when service is not create by user.
    private func addServiceToJobRequest(body: SendAddJobberServiceModel) {
        // necessary 2
        let network = RestfulAPI<SendAddJobberServiceModel,Generic<EMPTYMODEL>>.init(path: "/jobber/service/add")
            .with(auth: .jobber)
            .with(method: .POST)
            .with(body: body)
        
        handleRequestByUI(network, disable: [addButton]) { [weak self] (response) in
            self?.addButton.setTitle("Added".localized(), for: .normal)
            self?.addButton.backgroundColor = .heavyGreen
            self?.moveBack()
        }
    }
    
    /// use this method when service created by user.
    private func createGeneralServiceRequest(body: SendCreateJobberServiceModel, completion: @escaping (_ item: RCCreateJobberServiceModel?) -> Void) {
        let network = RestfulAPI<SendCreateJobberServiceModel,Generic<RCCreateJobberServiceModel>>.init(path: "/jobber/service/create")
            .with(auth: .jobber)
            .with(method: .POST)
            .with(body: body)
        
        handleRequestByUI(network) { (response) in
            completion(response.data)
        }
    }
    
    /// use this method when unit generated by user.
    private func createGeneralUnitRequest(unitname: String, completion: @escaping (_ item: RCCreateUnitModel?) -> Void) {
        struct SendCreateUnitModel: Codable { let title: String }
        
        let network = RestfulAPI<SendCreateUnitModel,Generic<RCCreateUnitModel>>.init(path: "/jobber/unit/add")
            .with(auth: .jobber)
            .with(method: .POST)
            .with(body: SendCreateUnitModel(title: unitname))
        
        handleRequestByUI(network) { (response) in
            completion(response.data)
        }
    }
    
    private func addServiceButtonTapped(servicePrice: Double) {
        guard let jobID = self.jobID else { return }
                
        func addServiceAndBindToJob(serviceID: String, defaultUnitID: String?) {
            self.addJobToJobberRequest(jobID: jobID) { [weak self] (rcAddJobberJob) in
                guard let self = self else { return }
                let customUnitID: String? = (self.unitType == .hour) ? nil:defaultUnitID
                let body = SendAddJobberServiceModel(jobID: jobID, serviceID: serviceID, unitID: customUnitID, price: servicePrice)
                
                self.addServiceToJobRequest(body: body)
            }
        }
        
        func addService(serviceTitle: String, unitID: String?) {
            let body = SendCreateJobberServiceModel(title: serviceTitle, unitID: unitID, jobID: jobID)
            
            self.createGeneralServiceRequest(body: body) { rcCreateJobberServiceModel in
                if let serviceID = rcCreateJobberServiceModel?.id {
                    addServiceAndBindToJob(serviceID: serviceID, defaultUnitID: unitID)
                }
            }
        }
        
        if let serviceID = serviceListModel?.id {
            if let unitID = unitModel?.id, self.unitType == .numeric {
                //1-1 service by admin + unit by admin ( unit is numeric)
                addServiceAndBindToJob(serviceID: serviceID, defaultUnitID: unitID)
            } else if unitModel?.id == nil && self.unitType == .hour {
                //1-2 service by admin + unit by admin ( but unit is hour(nil):
                addServiceAndBindToJob(serviceID: serviceID, defaultUnitID: nil)
            } else {
                //2 service by admin + unit by user
                if let unitname = unitModel?.title {
                    self.createGeneralUnitRequest(unitname: unitname) { rcCreateUnitModel in
                        if let unitID = rcCreateUnitModel?.id {
                            addServiceAndBindToJob(serviceID: serviceID, defaultUnitID: unitID)
                        }
                    }
                }
            }
        } else {
            //3 service by user + unit by admin
            if let unitID = unitModel?.id, let serviceTitle = serviceListModel?.title {
                addService(serviceTitle: serviceTitle, unitID: unitID)
            } else {
                //4 service by user + unit by user
                if let unitname = self.unitModel?.title, let serviceTitle = serviceListModel?.title {
                    // add custom unit numeric and then add service
                    self.createGeneralUnitRequest(unitname: unitname) { rcCreateUnitModel in
                        if let unitID = rcCreateUnitModel?.id {
                            addService(serviceTitle: serviceTitle, unitID: unitID)
                        }
                    }
                } else if unitModel == nil, let serviceTitle = serviceListModel?.title {
                    // add custom hour unit and then add service
                    addService(serviceTitle: serviceTitle, unitID: nil)
                }
            }
        }
    }
    
    private func moveBack() {
        if let vc = navigationController?.viewControllers[1] as? JobberJobServiceTableViewController {
            navigationController?.popToViewController(vc, animated: true)
        } else if let vc = navigationController?.viewControllers[3] as? JobberJobServiceTableViewController {
            navigationController?.popToViewController(vc, animated: true)
        }
        
        if let jobID = jobID {
            delegate?.newServiceAddedTo(jobID)
        }
    }
    
    @IBAction func addButtonTapped(_ sender: Any) {
        guard let text = self.priceTextField.text, let servicePrice = Double(text), servicePrice >= 1 else {
            let alertContent = AlertContent(title: .none, subject: "Enter Price".localized(), description: "Please enter price for the service".localized())
            let warningVC = WarningContentViewController
                .instantiateVC()
                .alert(alertContent)

            present(warningVC.prepare(warningVC.interactor), animated: true)
            return
        }
        guard unitType != .none else {
            let alertContent = AlertContent(title: .none, subject: "None Unit Type".localized(), description: "Please select unit type".localized())
            let warningVC = WarningContentViewController
                .instantiateVC()
                .alert(alertContent)
            
            present(warningVC.prepare(warningVC.interactor),animated: true)
            return
        }

        if unitModel == nil && unitType == .numeric {
            let alertContent = AlertContent(title: .none, subject: "None Unit".localized(), description: "Please select your unit".localized())
            let warningVC = WarningContentViewController
                .instantiateVC()
                .alert(alertContent)
            
            present(warningVC.prepare(warningVC.interactor),animated: true)
            return
        }
        
        let alertContent = AlertContent(title: .none, subject: "Create Service".localized(), description: "Are you sure you want to create this service?".localized())
        let alertVC = AlertContentViewController
            .instantiateVC()
            .alert(alertContent)
        // present alertVC
        present(alertVC.prepare(alertVC.interactor), animated: true)
        // yes button taped:
        alertVC.yesButtonTappedHandler = { [weak self] in
            guard let self = self else { return }
            
            self.addServiceButtonTapped(servicePrice: servicePrice)
        }
    }
}

extension JobberServiceTableViewController {
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if indexPath.section == 0 { // unit type
            let nc = UINavigationController.instantiateVC(.jobber, withId: "JobberUnitTypeNavigationController") as! UINavigationController
            let vc = nc.viewControllers[0] as! JobberUnitTypeTableViewController
            
            vc.delegate = self
            present(nc, animated: true)
        }
        
        if indexPath.section == 1 { // unit title
            // present choosen unit vc.
            let nc = UINavigationController.instantiateVC(.jobber, withId: "JobberUnitListNavigationController") as! UINavigationController
            let vc = nc.viewControllers[0] as! JobberUnitListTableViewController
            
            vc.delegate = self
            present(nc, animated: true)
        }
        // deselected item at indexPath
        tableView.deselectRow(at: indexPath, animated: true)
    }

    override func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        // EDIT MODE: This section is for update (1.1)
//        if indexPath.section == 1 && indexPath.section == 0 {
//            cell.isUserInteractionEnabled = false
//            cell.alpha = 0.4
//        }
    }
}

extension JobberServiceTableViewController: KeyboardInjection {}
extension JobberServiceTableViewController: JobberUnitListTableViewControllerDelegate {
    func selectedUnit(_ unitModel: UnitModel) {
        self.unitModel = unitModel
    }
}

extension JobberServiceTableViewController: JobberUnitTypeTableViewControllerDelegate {
    func selected(_ unitType: UnitTypeModel) {
        self.unitType = unitType
    }
}
